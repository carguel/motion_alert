#!/usr/bin/env ruby


$LOAD_PATH << File.expand_path(File.join(__FILE__, "..", "..", "lib"))

require 'thor'
require 'motion_alert'
require 'motion_alert/cli/helper'

class MotionAlertThor < Thor

  desc "start_event MOTION_FOLDER", "Define how to handle the start of a motion event"
  method_option :s3,
          banner: "Enable the S3 notifier",
          type: :boolean,
          required: false
  method_option :s3_aws_access_key,
          banner: "AWS Access key, required when s3 notifier is selected",
          type: :string,
          required: false
  method_option :s3_aws_secret_key,
          banner: "AWS Secret key, required when s3 notifier is selected",
          type: :string,
          required: false
  method_option :s3_bucket_name,
          banner: "Bucket name where to store an image on S3, required when s3 notifier is selected",
          type: :string,
          required: false
  method_option :s3_path,
          banner: "Optional path under the bucket where to store an image on S3, default = '/'",
          type: :string,
          required: false
  method_option :mail,
          banner: "Enable the mail notifier",
          type: :boolean,
          required: false
  method_option :mail_from,
          banner: "Originator address of the mails to send, required when mail notifier is selected",
          type: :string,
          required: false
  method_option :mail_to,
          banner: "List of recipients to send email to, required when mail notifier is selected",
          type: :array,
          required: false
  method_option :mail_subject,
          banner: "Subject of the mail to send, required when mail notifier is selected",
          type: :string,
          required: false
  method_option :mail_text,
          banner: "Body of the mail to send, required when s3 notifier is selected",
          type: :string,
          required: false
  method_option :ckt,
          banner: "Enable the ClickATell notifier",
          type: :boolean,
          required: false
  method_option :ckt_user,
          banner: "User to connect to the ClickATell HTTP API",
          type: :string,
          required: false
  method_option :ckt_password,
          banner: "Password to connect to the ClickATell HTTP API",
          type: :string,
          required: false
  method_option :ckt_api_id,
          banner: "API id to connect to the ClickATell HTTP API",
          required: false
  method_option :ckt_phone,
          banner: "Phone number of the SMS to send using the ClickATell HTTP API",
          required: false
  method_option :ckt_message,
          banner: "Message of the SMS to send using the ClickATell HTTP API",
          required: false
  long_desc <<-DESC
            Define how to handle the start of a motion event.

            The MOTION_FOLDER is the path of the directory where motion is configured to store images and movies.
            At least, one notifier shall be activated.

            The supported notifiers are:
            \x5- mail: send an email to a list of recipients, including an image associated to the event
            \x5- s3: store on a S3 bucket an image associated to the event
            \x5- ckt: send a SMS using the ClickATell HTTP API
  DESC
  def start_event(motion_folder)
    folder = MotionAlert::MotionFolder.new(motion_folder)
    event = MotionAlert::Event.new(folder)

    notifier_map = {"s3"   => MotionAlert::Notifiers::S3Notifier, 
                    "mail" => MotionAlert::Notifiers::MailNotifier,
                    "ckt"  => MotionAlert::Notifiers::ClickATell}

    notifiers = notifier_map.keys & options.keys

    raise "No notifier specified" if notifiers.empty?

    notifiers.each do |n|
      opts = MotionAlert::CLI::Helper.options_for_notifier(n, options)
      clazz = notifier_map[n]
      notifier = clazz.send(:from_options, opts)
      event.register(notifier)
    end

    event.start
  end
end

begin
  MotionAlertThor.start(ARGV)
rescue Exception => e
  STDERR.puts <<-END
An error occured.
The followng message was raised:

#{e.message.sub /^/, "\t"}
  END
end

